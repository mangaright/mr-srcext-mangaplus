const $c79f2ebfb8bdbc2551922b7f15823e7a$var$peq = new Uint32Array(65536);
const $c79f2ebfb8bdbc2551922b7f15823e7a$var$myers_32 = (a, b)=>{
    const n = a.length;
    const m = b.length;
    const lst = 1 << n - 1;
    let pv = -1;
    let mv = 0;
    let sc = n;
    let i = n;
    while(i--)$c79f2ebfb8bdbc2551922b7f15823e7a$var$peq[a.charCodeAt(i)] |= 1 << i;
    for(i = 0; i < m; i++){
        let eq = $c79f2ebfb8bdbc2551922b7f15823e7a$var$peq[b.charCodeAt(i)];
        const xv = eq | mv;
        eq |= (eq & pv) + pv ^ pv;
        mv |= ~(eq | pv);
        pv &= eq;
        if (mv & lst) sc++;
        if (pv & lst) sc--;
        mv = mv << 1 | 1;
        pv = pv << 1 | ~(xv | mv);
        mv &= xv;
    }
    i = n;
    while(i--)$c79f2ebfb8bdbc2551922b7f15823e7a$var$peq[a.charCodeAt(i)] = 0;
    return sc;
};
const $c79f2ebfb8bdbc2551922b7f15823e7a$var$myers_x = (b, a)=>{
    const n = a.length;
    const m = b.length;
    const mhc = [];
    const phc = [];
    const hsize = Math.ceil(n / 32);
    const vsize = Math.ceil(m / 32);
    for(let i = 0; i < hsize; i++){
        phc[i] = -1;
        mhc[i] = 0;
    }
    let j = 0;
    for(; j < vsize - 1; j++){
        let mv = 0;
        let pv = -1;
        const start = j * 32;
        const vlen = Math.min(32, m) + start;
        for(let k = start; k < vlen; k++)$c79f2ebfb8bdbc2551922b7f15823e7a$var$peq[b.charCodeAt(k)] |= 1 << k;
        for(let i1 = 0; i1 < n; i1++){
            const eq = $c79f2ebfb8bdbc2551922b7f15823e7a$var$peq[a.charCodeAt(i1)];
            const pb = phc[i1 / 32 | 0] >>> i1 & 1;
            const mb = mhc[i1 / 32 | 0] >>> i1 & 1;
            const xv = eq | mv;
            const xh = ((eq | mb) & pv) + pv ^ pv | eq | mb;
            let ph = mv | ~(xh | pv);
            let mh = pv & xh;
            if (ph >>> 31 ^ pb) phc[i1 / 32 | 0] ^= 1 << i1;
            if (mh >>> 31 ^ mb) mhc[i1 / 32 | 0] ^= 1 << i1;
            ph = ph << 1 | pb;
            mh = mh << 1 | mb;
            pv = mh | ~(xv | ph);
            mv = ph & xv;
        }
        for(let k1 = start; k1 < vlen; k1++)$c79f2ebfb8bdbc2551922b7f15823e7a$var$peq[b.charCodeAt(k1)] = 0;
    }
    let mv = 0;
    let pv = -1;
    const start = j * 32;
    const vlen = Math.min(32, m - start) + start;
    for(let k = start; k < vlen; k++)$c79f2ebfb8bdbc2551922b7f15823e7a$var$peq[b.charCodeAt(k)] |= 1 << k;
    let score = m;
    for(let i1 = 0; i1 < n; i1++){
        const eq = $c79f2ebfb8bdbc2551922b7f15823e7a$var$peq[a.charCodeAt(i1)];
        const pb = phc[i1 / 32 | 0] >>> i1 & 1;
        const mb = mhc[i1 / 32 | 0] >>> i1 & 1;
        const xv = eq | mv;
        const xh = ((eq | mb) & pv) + pv ^ pv | eq | mb;
        let ph = mv | ~(xh | pv);
        let mh = pv & xh;
        score += ph >>> m - 1 & 1;
        score -= mh >>> m - 1 & 1;
        if (ph >>> 31 ^ pb) phc[i1 / 32 | 0] ^= 1 << i1;
        if (mh >>> 31 ^ mb) mhc[i1 / 32 | 0] ^= 1 << i1;
        ph = ph << 1 | pb;
        mh = mh << 1 | mb;
        pv = mh | ~(xv | ph);
        mv = ph & xv;
    }
    for(let k1 = start; k1 < vlen; k1++)$c79f2ebfb8bdbc2551922b7f15823e7a$var$peq[b.charCodeAt(k1)] = 0;
    return score;
};
const $c79f2ebfb8bdbc2551922b7f15823e7a$export$d4cadb6bf5b49eb = (a, b)=>{
    if (a.length < b.length) {
        const tmp = b;
        b = a;
        a = tmp;
    }
    if (b.length === 0) return a.length;
    if (a.length <= 32) return $c79f2ebfb8bdbc2551922b7f15823e7a$var$myers_32(a, b);
    return $c79f2ebfb8bdbc2551922b7f15823e7a$var$myers_x(a, b);
};
const $c79f2ebfb8bdbc2551922b7f15823e7a$export$9492a44fc11b0844 = (str, arr)=>{
    let min_distance = Infinity;
    let min_index = 0;
    for(let i = 0; i < arr.length; i++){
        const dist = $c79f2ebfb8bdbc2551922b7f15823e7a$export$d4cadb6bf5b49eb(str, arr[i]);
        if (dist < min_distance) {
            min_distance = dist;
            min_index = i;
        }
    }
    return arr[min_index];
};
