{"id":"QLhU","dependencies":[{"name":"/Users/rohancribbs/Code/js/mm-src-mangaplus/package.json","includedInParent":true,"mtime":1690560976263},{"name":"/Users/rohancribbs/Code/js/mm-src-mangaplus/.babelrc","includedInParent":true,"mtime":1688842366056},{"name":"/Users/rohancribbs/Code/js/mm-src-mangaplus/node_modules/core-js/package.json","includedInParent":true,"mtime":1688674501839},{"name":"../internals/to-integer-or-infinity","loc":{"line":1,"column":34,"index":34},"parent":"/Users/rohancribbs/Code/js/mm-src-mangaplus/node_modules/core-js/internals/to-absolute-index.js","resolved":"/Users/rohancribbs/Code/js/mm-src-mangaplus/node_modules/core-js/internals/to-integer-or-infinity.js"}],"generated":{"js":"var toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar max = Math.max;\nvar min = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\nmodule.exports = function (index, length) {\n  var integer = toIntegerOrInfinity(index);\n  return integer < 0 ? max(integer + length, 0) : min(integer, length);\n};\n"},"sourceMaps":null,"error":null,"hash":"0ba4623e1563dbe510e5324399fdbb9c","cacheData":{"env":{}}}